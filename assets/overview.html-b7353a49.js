import{_ as p,W as o,X as i,Y as n,Z as s,$ as e,a0 as t,C as c}from"./framework-63781bb7.js";const l={},u=t(`<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><p>dapper是一个简单的对象关系映射框架（ORM----Object Relation Mapping），它几乎与原始的ADO.NET数据操作读取一样快是一个用来执行SQL并映射模型的轻量级ORM框架。</p><h1 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h1><p>引用nuget包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;PackageReference Include=&quot;Dapper&quot; Version=&quot;2.0.123&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后要操作哪些数据库就再安装对应数据库的包。</p><p>常用数据库连接字符串</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MySQL：
Server=47.xxxx;database=gxgtest;uid=gxg;pwd=123456;charset=utf8;

SQL server
Data Source=.;Initial Catalog=Test;User ID=sa;Password=123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h2><h3 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询" aria-hidden="true">#</a> 基础查询</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var connection = new SqlConnection(&quot;Data Source=.;Initial Catalog=Test;User ID=sa;Password=123456&quot;);
var sql = &quot;select * from Users where Email=@email&quot;;
var info = connection.Query&lt;Users&gt;(sql, new { email = &quot;123456&quot; });
Console.ReadLine();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数化查询" tabindex="-1"><a class="header-anchor" href="#参数化查询" aria-hidden="true">#</a> 参数化查询</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> =</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@reportId&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>ReportId<span class="token punctuation">)</span><span class="token punctuation">;</span>
parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@reportClassId&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>ReportClassId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _pacsViewDapperRepository<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetImageReportDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> Like</h4><h5 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> Postgresql</h5><p>示例like</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token string">@&quot;SELECT * FROM &quot;&quot;user&quot;&quot;.&quot;&quot;userinfo&quot;&quot; info where info.name like @name&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%ab%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> dapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> IN</h4><h5 id="postgresql-1" tabindex="-1"><a class="header-anchor" href="#postgresql-1" aria-hidden="true">#</a> Postgresql</h5><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code>var str <span class="token operator">=</span> <span class="token variable">@&quot;SELECT * FROM &quot;</span>&quot;user<span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;&quot;</span>userinfo<span class="token string">&quot;&quot;</span> info <span class="token keyword">where</span>  info<span class="token punctuation">.</span>status<span class="token operator">=</span><span class="token keyword">any</span><span class="token punctuation">(</span><span class="token variable">@status</span><span class="token punctuation">)</span><span class="token string">&quot;;
var statusList = new int[3] { 1, 2, 3 };
var parameters = new DynamicParameters();
parameters.Add(&quot;</span><span class="token variable">@status</span>&quot;<span class="token punctuation">,</span> statusList<span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var list <span class="token operator">=</span> await dapper<span class="token punctuation">.</span>QueryAsync<span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PostgreSQL IN运算符不支持数组（或任何其他集合）作为参数，所以需要使用<strong>WHERE Id = ANY(@CustomerIdList)</strong></p>`,22),r={href:"https://www.postgresql.org/docs/current/functions-subquery.html#FUNCTIONS-SUBQUERY-ANY-SOME",target:"_blank",rel:"noopener noreferrer"},d=t(`<h5 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h5><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code>_db<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>Users<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM dbo.Users s WHERE s.id IN @ids &quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> { ids <span class="token operator">=</span> IDs<span class="token punctuation">.</span>ToArray<span class="token punctuation">(</span><span class="token punctuation">)</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="not-in" tabindex="-1"><a class="header-anchor" href="#not-in" aria-hidden="true">#</a> Not IN</h4><h5 id="postgresql-2" tabindex="-1"><a class="header-anchor" href="#postgresql-2" aria-hidden="true">#</a> Postgresql</h5><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code>var str <span class="token operator">=</span> <span class="token variable">@&quot;SELECT * FROM &quot;</span>&quot;user<span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;&quot;</span>userinfo<span class="token string">&quot;&quot;</span> info <span class="token keyword">where</span>  info<span class="token punctuation">.</span>status<span class="token operator">!=</span><span class="token keyword">any</span><span class="token punctuation">(</span><span class="token variable">@status</span><span class="token punctuation">)</span><span class="token string">&quot;;
var statusList = new int[3] { 1, 2, 3 };
var parameters = new DynamicParameters();
parameters.Add(&quot;</span><span class="token variable">@status</span>&quot;<span class="token punctuation">,</span> statusList<span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var list <span class="token operator">=</span> await dapper<span class="token punctuation">.</span>QueryAsync<span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span>SerializeObject<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> &lt;&gt;</h4><h5 id="postgresql-3" tabindex="-1"><a class="header-anchor" href="#postgresql-3" aria-hidden="true">#</a> Postgresql</h5><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code>var str <span class="token operator">=</span> <span class="token variable">@&quot;SELECT * FROM &quot;</span>&quot;user<span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;&quot;</span>userinfo<span class="token string">&quot;&quot;</span> info <span class="token keyword">where</span>  info<span class="token punctuation">.</span>status<span class="token operator">!=</span><span class="token variable">@status</span><span class="token string">&quot;;
var parameters = new DynamicParameters();
parameters.Add(&quot;</span><span class="token variable">@status</span>&quot;<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var list <span class="token operator">=</span>await dapper<span class="token punctuation">.</span>QueryAsync<span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

或者
var <span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM Invoice WHERE Kind &lt;&gt; ALL(@Kind);&quot;</span><span class="token punctuation">;</span>
var invoices <span class="token operator">=</span> connection<span class="token punctuation">.</span>Query<span class="token operator">&lt;</span>Invoice<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">,</span> <span class="token keyword">new</span> {Kind <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> {<span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span>}}<span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询映射" tabindex="-1"><a class="header-anchor" href="#查询映射" aria-hidden="true">#</a> 查询映射</h3><p>当数据库里面的列和代码中模型的列命名不一致的时候(大小写等可以自动映射)是映射不上的比如create_time想映射到CreateTime上，这个时候我们一般会编写别名转换来实现，最近看到另外一种写法，如下</p><p>数据库中该表的字段和代码的字段有下面区别，所以我做了一个映射</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var userColMap = new ColumnMap();
userColMap.Add(&quot;pass_word&quot;, nameof(UserInfo.PassWord));
userColMap.Add(&quot;create_time&quot;, nameof(UserInfo.CreateTime));
userColMap.Add(&quot;credit&quot;, nameof(UserInfo.Integral));
userColMap.Add(&quot;id&quot;, nameof(UserInfo.Id));
userColMap.Add(&quot;account&quot;, nameof(UserInfo.Account));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于这个ColumnMap，实现如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &lt;summary&gt;
/// 列映射
/// &lt;/summary&gt;
public class ColumnMap
{
    /// &lt;summary&gt;
    /// 向前映射
    /// &lt;/summary&gt;
    private readonly Dictionary&lt;string, string&gt; forward = new Dictionary&lt;string, string&gt;();

    /// &lt;summary&gt;
    /// 向后映射
    /// &lt;/summary&gt;
    private readonly Dictionary&lt;string, string&gt; reverse = new Dictionary&lt;string, string&gt;();

    /// &lt;summary&gt;
    /// 添加映射的值(参数不区分是数据库列和代码列的先后关系)
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;t1&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;t2&quot;&gt;&lt;/param&gt;
    public void Add(string t1, string t2)
    {
        forward.Add(t1, t2);
        reverse.Add(t2, t1);
    }

    public string this[string index]
    {
        get
        {
            // Check for a custom column map.
            if (forward.ContainsKey(index))
                return forward[index];
            if (reverse.ContainsKey(index))
                return reverse[index];

            // If no custom mapping exists, return the value passed in.
            return index;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后给dapper设置自定义映射（这里的UserInfo是查询时候映射的模型）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static class DapperMapperConfigs
{
    /// &lt;summary&gt;
    /// dapper映射配置
    /// &lt;/summary&gt;
    public static void Init()
    {
        var userColMap = new ColumnMap();
        userColMap.Add(&quot;pass_word&quot;, nameof(UserInfo.PassWord));
        userColMap.Add(&quot;create_time&quot;, nameof(UserInfo.CreateTime));
        userColMap.Add(&quot;credit&quot;, nameof(UserInfo.Integral));
        userColMap.Add(&quot;id&quot;, nameof(UserInfo.Id));
        userColMap.Add(&quot;account&quot;, nameof(UserInfo.Account));

        SqlMapper.SetTypeMap(typeof(UserInfo), new CustomPropertyTypeMap(typeof(UserInfo), (type, columnName) =&gt; type.GetProperty(userColMap[columnName])));
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果使用了自定义映射，那么默认的映射就不生效了，比如数据库的id映射不到代码的ID上面</p></blockquote><p>在项目启动的时候就执行该静态方法，然后再使用dapper查询的时候就可以不使用别名，使用自定义的映射了。</p><p>当然还有另外的写法，不再详细描述，只是留下网上的代码</p><p>根据列特性映射</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SqlMapper.SetTypeMap(typeof(Section), new CustomPropertyTypeMap(
    typeof(Section), (type, columnName) =&gt; type.GetProperties().FirstOrDefault(prop =&gt;
    prop.GetCustomAttributes(false).OfType&lt;ColumnAttribute&gt;().Any(attr =&gt; attr.Name == columnName))));


public class Section
{
    [Column(&quot;db_column_name1&quot;)] // Side note: if you create aliases, then they would match this.
    public int Id { get; set; }
    [Column(&quot;db_column_name2&quot;)]
    public string Title { get; set; }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据备注特性映射</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class TypeWithMapping
{
   [Description(&quot;B&quot;)]
   public string A { get; set; }

   [Description(&quot;A&quot;)]
   public string B { get; set; }
}

// custom mapping
var map = new CustomPropertyTypeMap(typeof(TypeWithMapping),
                                    (type, columnName) =&gt; type.GetProperties().FirstOrDefault(prop =&gt; GetDescriptionFromAttribute(prop) == columnName));
Dapper.SqlMapper.SetTypeMap(typeof(TypeWithMapping), map);

static string GetDescriptionFromAttribute(MemberInfo member)
{
   if (member == null) return null;

   var attrib = (DescriptionAttribute)Attribute.GetCustomAttribute(member, typeof(DescriptionAttribute), false);
   return attrib == null ? null : attrib.Description;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h3 id="简单的事务方法" tabindex="-1"><a class="header-anchor" href="#简单的事务方法" aria-hidden="true">#</a> 简单的事务方法</h3><p>这种事务方式很原始，就是在已存在的 Connection 上创建 Transaction， 然后将事务作为参数传递到 Execute 方法中，当业务逻辑处理完后，再做 commit 提交，参考如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO Customers (CustomerName) Values (@CustomerName);&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>FiddleHelper<span class="token punctuation">.</span><span class="token function">GetConnectionStringSqlServerW3Schools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Mark&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Sam&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transactionscope" tabindex="-1"><a class="header-anchor" href="#transactionscope" aria-hidden="true">#</a> TransactionScope</h3><p>如果你喜欢用 TransactionScope 方式，有一点要注意，那就是需要在 connection 创建之前创建 Scope，然后在 Scope 作用域内做你想做的sql操作，最后执行一个 complete 提交即可，参考如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TransactionScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO Customers (CustomerName) Values (@CustomerName);&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> My<span class="token punctuation">.</span><span class="token function">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Mark&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Sam&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    transaction<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dapper-transaction-方式" tabindex="-1"><a class="header-anchor" href="#dapper-transaction-方式" aria-hidden="true">#</a> Dapper Transaction 方式</h3><p>这是使用 Dapper 最推荐的方式，毕竟它的代码语义太强了，你可以直接在 new 出的 Transaction 之上执行各自的sql语句，参考如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO Customers (CustomerName) Values (@CustomerName);&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>FiddleHelper<span class="token punctuation">.</span><span class="token function">GetConnectionStringSqlServerW3Schools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        transaction<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Mark&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        transaction<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;Sam&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        transaction<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>CustomerName <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三种方式总结的特别好，但有一点看着很不爽，那就是在执行 Transaction 之前需要 connection.Open()，有点繁琐，所以这一块还是可以再封装一下的。</p><h3 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h3>`,35),k={href:"https://mp.weixin.qq.com/s/IjFtMkqaH-Z9c6uURiAoZQ",target:"_blank",rel:"noopener noreferrer"},v={href:"http://Dapper.NET",target:"_blank",rel:"noopener noreferrer"},m=n("h1",{id:"nuget推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nuget推荐","aria-hidden":"true"},"#"),s(" Nuget推荐")],-1),b=n("h2",{id:"dapper-extension-aspnetcore",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dapper-extension-aspnetcore","aria-hidden":"true"},"#"),s(" Dapper.Extension.AspNetCore")],-1),g={href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/Run2948/Dapper.Extension.AspNetCore",target:"_blank",rel:"noopener noreferrer"};function q(f,y){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("IN相当于ANY:"),n("a",r,[s("https://www.postgresql.org/docs/current/functions-subquery.html#FUNCTIONS-SUBQUERY-ANY-SOME"),e(a)])]),d,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/IjFtMkqaH-Z9c6uURiAoZQ"),e(a)]),s(" | 如何在 "),n("a",v,[s("Dapper.NET"),e(a)]),s(" 中使用事务？")]),m,b,n("p",null,[n("a",g,[s("ASP.NET"),e(a)]),s(" Core 的 Dapper 扩展。")]),n("p",null,[s("GitHub："),n("a",h,[s("https://github.com/Run2948/Dapper.Extension.AspNetCore"),e(a)])])])}const x=p(l,[["render",q],["__file","overview.html.vue"]]);export{x as default};
