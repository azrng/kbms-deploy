import{_ as r,W as t,X as l,Y as e,Z as s,$ as n,a0 as i,C as o}from"./framework-63781bb7.js";const p={},c=e("h1",{id:"_1-前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-前言","aria-hidden":"true"},"#"),s(" 1. 前言")],-1),d=e("p",null,"本文是一个在centos系统部署.Net6的文章，本来内容基本上来源于作者艾三元，目的是对部署流程的一次熟悉以及对守护进程的一次学习。",-1),u=e("blockquote",null,[e("p",null,"本文示例环境：centos7、VS2022、.Net6")],-1),g=e("h1",{id:"_2-准备",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-准备","aria-hidden":"true"},"#"),s(" 2. 准备")],-1),m=e("p",null,"Linux服务器：通过Hyper-v启动的虚拟机(已经写有教程了)，系统使用CentOS-7-x86_64-Minimal-2009.iso",-1),v={href:"https://gitee.com/AZRNG/my-example",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>因为我这是一台新的centos7服务器，所以我先手动将 Microsoft 包签名密钥添加到受信任密钥列表，并添加 Microsoft 包存储库。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>rpm <span class="token operator">-</span><span class="token class-name">Uvh</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>packages<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>com<span class="token operator">/</span>config<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>升级所有包同时也升级软件和系统内核</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>yum update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_3-开始" tabindex="-1"><a class="header-anchor" href="#_3-开始" aria-hidden="true">#</a> 3. 开始</h1><h2 id="_3-1-安装环境" tabindex="-1"><a class="header-anchor" href="#_3-1-安装环境" aria-hidden="true">#</a> 3.1 安装环境</h2><p>如果已经安装SDK或者运行时，那么使用以下命令来查看安装了哪些版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet --list-sdks
dotnet --list-runtimes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我是新系统，所以直接就是命令找不到，如果你已经存在需要的版本就不用再安装了</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031144835.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>安装.Net6 SDK</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> dotnet-sdk-6.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145683.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>过程中会有两个“y”的原因是，命令执行的中途停顿了，让你确认下是否进行安装，你要输入“y”确认安装才会执行安装，安装完后，我们输入如下命令看下是否安装成功</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145160.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-2-拷贝项目" tabindex="-1"><a class="header-anchor" href="#_3-2-拷贝项目" aria-hidden="true">#</a> 3.2 拷贝项目</h2><p>环境已经装好，下面我们开始部署项目，需要先将项目拷贝到服务器上，可以直接拷贝发布好的项目到服务器</p><p>使用编译器打开项目，然后右键项目发布，然后选择发布到文件夹、发布地址等</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145533.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看发布后的目录</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145716.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后通过MobaXTerm工具将文件拷贝到服务器上</p><h2 id="_3-3-部署项目" tabindex="-1"><a class="header-anchor" href="#_3-3-部署项目" aria-hidden="true">#</a> 3.3 部署项目</h2><p>查看我们的项目</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145639.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>运行命令启动文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dotnet xxx.dll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145723.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为发布方式是Release，并且我配置的该模式不显示swagger，那么只能通过调用接口来测试是否发布成功。</p><p>在服务器直接调用示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> localhost:5000/api/Grade/GetGradeList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145072.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-4-配置nginx托管" tabindex="-1"><a class="header-anchor" href="#_3-4-配置nginx托管" aria-hidden="true">#</a> 3.4 配置Nginx托管</h2><p>安装nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-o</span>  nginx.rpm http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> nginx.rpm

yum <span class="token function">install</span> nginx

-- 启动nginx
systemctl start nginx

--置开机启动（linux宕机、重启会自动运行nginx不需要连上去输入命令）
systemctl <span class="token builtin class-name">enable</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145721.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-5-配置防火墙" tabindex="-1"><a class="header-anchor" href="#_3-5-配置防火墙" aria-hidden="true">#</a> 3.5 配置防火墙</h2><p>开放80端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd  <span class="token parameter variable">--permanent</span>  <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145949.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>重启防火墙以使配置即时生效：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145879.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>测试nginx是否可以访问</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145405.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>到这里我们的nginx已经安装好了</p><h2 id="_3-6-配置nginx对程序的转发" tabindex="-1"><a class="header-anchor" href="#_3-6-配置nginx对程序的转发" aria-hidden="true">#</a> 3.6 配置Nginx对程序的转发</h2><p>修改nginx的default.conf文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/nginx/conf.d/default.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>文件内容如下</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145650.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要修改server内容为</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        proxy_pass http://localhost:5000<span class="token punctuation">;</span>        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection keep-alive<span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存并退出，重新加载配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,55),b={href:"http://xn--ASP-l01ei38icu0b18k.NET",target:"_blank",rel:"noopener noreferrer"},f=e("figure",null,[e("img",{src:"https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145561.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),k=e("p",null,"重新通过本地访问服务器地址",-1),_=e("figure",null,[e("img",{src:"https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145619.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),x=e("p",null,"注意：如果这个时候提供502错误，这个问题是由于 SELinux 保护机制所导致，我们需要将 Nginx 添加至 SELinux 的白名单或者直接关闭SELinux 。",-1),w=e("p",null,"到这里基本完成了部署，但是还存在着其他问题：",-1),y={href:"http://xn--shellASP-n31mv7ql1b54i6mw9r0co4ybvq4h.NET",target:"_blank",rel:"noopener noreferrer"},N={href:"http://xn--ASP-eo8em63d.NET",target:"_blank",rel:"noopener noreferrer"},S=e("li",null,[e("p",null,"如果服务器宕机或需要重启我们则还是需要连入shell进行启动。")],-1),A={href:"http://xn--ASP-p18doh26b42u0tv2ghqmn92av76kz0idr8cyk3b.NET",target:"_blank",rel:"noopener noreferrer"},E={href:"http://xn--ASP-eo8em63d.NET",target:"_blank",rel:"noopener noreferrer"},R=i(`<h2 id="_3-7-配置supervisor守护服务" tabindex="-1"><a class="header-anchor" href="#_3-7-配置supervisor守护服务" aria-hidden="true">#</a> 3.7 配置Supervisor守护服务</h2><p>在应用程序停止运行的时候立即重新启动。这边我们用到了Supervisor这个工具，它是用 Python 开发的 Linux/Unix 系统下的一个进程管理工具。它可以使进程脱离终端，变为后台守护进程（daemon）。实时监控进程状态，异常退出时能自动重启。Supervisor 不支持任何版本的 Window 系统；</p><h3 id="_3-7-1-安装supervisor" tabindex="-1"><a class="header-anchor" href="#_3-7-1-安装supervisor" aria-hidden="true">#</a> 3.7.1 安装Supervisor</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>yum <span class="token operator">-</span>y install supervisor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145372.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>原文的安装方式我可能是因为网络问题没有成功</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>yum install python-setuptoolseasy_install supervisor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-7-2-配置supervisor" tabindex="-1"><a class="header-anchor" href="#_3-7-2-配置supervisor" aria-hidden="true">#</a> 3.7.2 配置Supervisor</h3><ul><li>运行supervisord 服务的时候，需要指定 Supervisor 配置文件，所以，先通过如下命令创建目录，以便让 supervisor 成功加载默认配置：</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>mkdir <span class="token operator">/</span>etc/supervisor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>目录创建成功后, 通过 echo_supervisord_conf 程序（用来生成初始配置文件,文件名可以自定义）来初始化一个配置文件：</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>echo_supervisord_conf &gt;<span class="token operator">/</span>etc/supervisor/supervisord<span class="token punctuation">.</span>conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过vim命令修改创建好的supervisord.conf配置信息：</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>vi <span class="token operator">/</span>etc/supervisor/supervisord<span class="token punctuation">.</span>conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>最下面找到如下文本片段</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token punctuation">;</span><span class="token namespace">[include]</span><span class="token punctuation">;</span>files = relative/directory/<span class="token operator">*</span><span class="token punctuation">.</span>ini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改为</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token namespace">[include]</span>files = <span class="token operator">/</span>etc/supervisor/conf<span class="token punctuation">.</span>d/<span class="token operator">*</span><span class="token punctuation">.</span>ini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),z={id:"_3-7-3-为我们部署的-net-core添加进程配置文件",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#_3-7-3-为我们部署的-net-core添加进程配置文件","aria-hidden":"true"},"#",-1),T={href:"http://xn--siquqi88bljttgkjqz.NET",target:"_blank",rel:"noopener noreferrer"},Z=i(`<ul><li>创建配置文件NetByDocker.ini(文件名自定义)</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token namespace">[program:NetByDocker]</span>
command=dotnet <span class="token operator">/</span>root/publish/NetByDocker<span class="token punctuation">.</span>dll
directory=<span class="token operator">/</span>root/publish/
autostart=true
autorestart=true
stderr_logfile=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/NetByDocker<span class="token punctuation">.</span>err<span class="token punctuation">.</span>log
stdout_logfile=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/NetByDocker<span class="token punctuation">.</span>out<span class="token punctuation">.</span>log
environment=ASPNETCORE_ENVIRONMENT=Production
user=root
stopsignal=INT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在/etc/supervisor/目录下创建一个文件夹conf.d</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>mkdir <span class="token operator">/</span>etc/supervisor/conf<span class="token punctuation">.</span>d/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将刚创建的配置文件NetByDocker.ini移到conf.d文件夹下</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/272869/1641177803533-fefc2c6a-15ce-449b-a264-0af8e60c568f.png" alt="img" loading="lazy"> 如果服务已经启动，则需要使用 supervisorctl reload 命令来使新的配置生效，当然，我们这里并没有启动，所以不需要这一步。</p><h3 id="_3-7-4-启动-supervisor-服务" tabindex="-1"><a class="header-anchor" href="#_3-7-4-启动-supervisor-服务" aria-hidden="true">#</a> 3.7.4 启动 Supervisor 服务</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>supervisord <span class="token operator">-</span>c <span class="token operator">/</span>etc/supervisor/supervisord<span class="token punctuation">.</span>conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动服务后，我们可以检测看一下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> NetByDocker.dll
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145590.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,11),P={href:"http://xn--onqo169akd439e0nil6zr1px8zroldon.NET",target:"_blank",rel:"noopener noreferrer"},C=i(`<figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031145601.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-8-配置supervisor开机启动" tabindex="-1"><a class="header-anchor" href="#_3-8-配置supervisor开机启动" aria-hidden="true">#</a> 3.8 配置Supervisor开机启动</h2><ul><li>进入/usr/lib/systemd/system/目录，并创建supervisord.service文件</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>vi <span class="token operator">/</span>usr/lib/systemd/system/supervisord<span class="token punctuation">.</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token namespace">[Unit]</span>
Description=Supervisor daemon


<span class="token namespace">[Service]</span>
<span class="token function">Type</span>=forking
ExecStart=<span class="token operator">/</span>usr/bin/supervisord <span class="token operator">-</span>c/etc/supervisor/supervisord<span class="token punctuation">.</span>conf
ExecStop=<span class="token operator">/</span>usr/bin/supervisorctl <span class="token variable">$OPTIONS</span> shutdown
ExecReload=<span class="token operator">/</span>usr/bin/supervisorctl <span class="token variable">$OPTIONS</span> reload
KillMode=<span class="token keyword">process</span>
Restart=on-failure
RestartSec=42s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置开机启动</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>systemctl enable supervisord<span class="token punctuation">.</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动supervisor进程</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>systemctl <span class="token function">start</span> supervisord<span class="token punctuation">.</span>service

systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证一下是否为开机启动</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>systemctl is-enabled supervisord
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202201031146091.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>重启，测试是否可以开机自启</p><p>总结：这个supervisord牵涉到的知识还挺多，如果后续使用该方式部署生产环境的东西，那么还是需要深入学习一下关于它的知识。</p><h1 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h1><p>原文作者：艾三元</p>`,17),q={href:"https://mp.weixin.qq.com/s/1x4cStEX3AIgsL9HvJHyCw",target:"_blank",rel:"noopener noreferrer"},B={href:"http://xn--centos-gg7km201a.Net",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-centos",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.cnblogs.com/toutou/p/supervisor.html",target:"_blank",rel:"noopener noreferrer"};function I(M,O){const a=o("ExternalLinkIcon");return t(),l("div",null,[c,d,u,g,m,e("p",null,[s("dotNet6程序："),e("a",v,[s("https://gitee.com/AZRNG/my-example"),n(a)]),s(" master分支")]),h,e("p",null,[e("a",b,[s("再次运行ASP.NET"),n(a)]),s(" Core应用程序")]),f,k,_,x,w,e("ul",null,[e("li",null,[e("p",null,[s("ASP.NETCore应用程序运行在shell之中，"),e("a",y,[s("如果关闭shell则会发现ASP.NET"),n(a)]),s(" Core应用被关闭，从而导致应用无法访问，这种情况当然是我们不想遇到的，而且生产环境对这种情况是零容忍的。")])]),e("li",null,[e("p",null,[e("a",N,[s("如果ASP.NET"),n(a)]),s(" Core进程意外终止那么需要人为连进shell进行再次启动，往往这种操作都不够及时。")])]),S]),e("p",null,[s("为了解决这些问题，"),e("a",A,[s("我们需要有一个程序来监听ASP.NET"),n(a)]),s(" Core 应用程序的状况。那么要解决这些问题，我们就必须要实现这么一个功能："),e("a",E,[s("如果ASP.NET"),n(a)]),s(" Core 意外终止，那么我们要自动重启；如果服务器服务器重启后，我们要有个类似脚本命令一样，自动执行 dotnet 命令。现在正好有个基于 Python 开发的工具 Supervisor 可以解决我们上述问题。")]),R,e("h3",z,[G,s(" 3.7.3 "),e("a",T,[s("为我们部署的.NET"),n(a)]),s(" Core添加进程配置文件")]),Z,e("p",null,[s("这个时候, 我们已经不需要使用dotnet命令运行程序, "),e("a",P,[s("同样可以访问我们部署的.NET"),n(a)]),s(" Core程序了。")]),C,e("p",null,[s("地址："),e("a",q,[s("https://mp.weixin.qq.com/s/1x4cStEX3AIgsL9HvJHyCw"),n(a)])]),e("p",null,[e("a",B,[s("centos安装.Net"),n(a)]),s("："),e("a",D,[s("https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-centos"),n(a)])]),e("p",null,[s("Supervisor echo_supervisord_conf配置详解："),e("a",L,[s("https://www.cnblogs.com/toutou/p/supervisor.html"),n(a)])])])}const V=r(p,[["render",I],["__file","centos_net6.html.vue"]]);export{V as default};
