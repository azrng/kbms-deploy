const e=JSON.parse('{"key":"v-7bdff126","path":"/dotnetcore/webapi/webapiversion.html","title":"API版本控制","lang":"zh-CN","frontmatter":{"title":"API版本控制","lang":"zh-CN","date":"2022-08-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNet"],"tag":["webapi"],"description":"1. 优点 有助于保护原有系统，不受影响，并及时修改问题 可以实现用户的私人定制（比如是付费接口） 快速迭代 2. API版本控制 在URL中追加版本或者作为查询字符串参数 通过自动以标头和通过接受标头 2.1 安装组件 ASP.NET API versioning为您提供了一种功能强大但易于使用的方法，用于将API版本控制语义添加到使用ASP.NET构建的新的和现有的REST服务中。API版本控制扩展定义了简单的元数据属性和约定，用于描述您的服务实现了哪些API版本。","head":[["meta",{"property":"og:url","content":"https://azrng.github.io/kbms/kbms/dotnetcore/webapi/webapiversion.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"API版本控制"}],["meta",{"property":"og:description","content":"1. 优点 有助于保护原有系统，不受影响，并及时修改问题 可以实现用户的私人定制（比如是付费接口） 快速迭代 2. API版本控制 在URL中追加版本或者作为查询字符串参数 通过自动以标头和通过接受标头 2.1 安装组件 ASP.NET API versioning为您提供了一种功能强大但易于使用的方法，用于将API版本控制语义添加到使用ASP.NET构建的新的和现有的REST服务中。API版本控制扩展定义了简单的元数据属性和约定，用于描述您的服务实现了哪些API版本。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-09T02:19:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"webapi"}],["meta",{"property":"article:published_time","content":"2022-08-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T02:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"API版本控制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-25T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-09T02:19:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"2.1 安装组件","slug":"_2-1-安装组件","link":"#_2-1-安装组件","children":[{"level":3,"title":"2.1.1 常用配置","slug":"_2-1-1-常用配置","link":"#_2-1-1-常用配置","children":[]}]},{"level":2,"title":"2.2 QueryString来实现版本控制","slug":"_2-2-querystring来实现版本控制","link":"#_2-2-querystring来实现版本控制","children":[{"level":3,"title":"2.2.1 ConfigureServices中配置","slug":"_2-2-1-configureservices中配置","link":"#_2-2-1-configureservices中配置","children":[]},{"level":3,"title":"2.2.2 控制器设置版本","slug":"_2-2-2-控制器设置版本","link":"#_2-2-2-控制器设置版本","children":[]},{"level":3,"title":"2.2.3 特定方法设置版本","slug":"_2-2-3-特定方法设置版本","link":"#_2-2-3-特定方法设置版本","children":[]},{"level":3,"title":"2.2.4 设置不受版本控制","slug":"_2-2-4-设置不受版本控制","link":"#_2-2-4-设置不受版本控制","children":[]},{"level":3,"title":"2.3.5 访问地址","slug":"_2-3-5-访问地址","link":"#_2-3-5-访问地址","children":[]}]},{"level":2,"title":"2.3 URL Path Segment来实现版本控制","slug":"_2-3-url-path-segment来实现版本控制","link":"#_2-3-url-path-segment来实现版本控制","children":[{"level":3,"title":"2.3.1 ConfigureServices中配置","slug":"_2-3-1-configureservices中配置","link":"#_2-3-1-configureservices中配置","children":[]},{"level":3,"title":"2.3.2 控制器设置版本","slug":"_2-3-2-控制器设置版本","link":"#_2-3-2-控制器设置版本","children":[]},{"level":3,"title":"2.3.3 特定方法设置版本","slug":"_2-3-3-特定方法设置版本","link":"#_2-3-3-特定方法设置版本","children":[]},{"level":3,"title":"2.3.4 设置不受版本控制","slug":"_2-3-4-设置不受版本控制","link":"#_2-3-4-设置不受版本控制","children":[]},{"level":3,"title":"2.3.5 访问地址","slug":"_2-3-5-访问地址-1","link":"#_2-3-5-访问地址-1","children":[]}]},{"level":2,"title":"2.4 HTTP Headers来实现版本控制","slug":"_2-4-http-headers来实现版本控制","link":"#_2-4-http-headers来实现版本控制","children":[{"level":3,"title":"2.4.1 ConfigureServices中配置","slug":"_2-4-1-configureservices中配置","link":"#_2-4-1-configureservices中配置","children":[]},{"level":3,"title":"2.4.2 控制器设置版本","slug":"_2-4-2-控制器设置版本","link":"#_2-4-2-控制器设置版本","children":[]},{"level":3,"title":"2.4.3 特定方法设置版本","slug":"_2-4-3-特定方法设置版本","link":"#_2-4-3-特定方法设置版本","children":[]},{"level":3,"title":"2.4.4 设置不受版本控制","slug":"_2-4-4-设置不受版本控制","link":"#_2-4-4-设置不受版本控制","children":[]},{"level":3,"title":"2.4.5 访问地址","slug":"_2-4-5-访问地址","link":"#_2-4-5-访问地址","children":[]}]},{"level":2,"title":"2.5 同时支持多种模式","slug":"_2-5-同时支持多种模式","link":"#_2-5-同时支持多种模式","children":[]},{"level":2,"title":"2.6 不借助包，封装文件","slug":"_2-6-不借助包-封装文件","link":"#_2-6-不借助包-封装文件","children":[]}],"git":{"createdTime":1670219403000,"updatedTime":1670552357000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.33,"words":1299},"filePathRelative":"dotnetcore/webapi/webapiversion.md","localizedDate":"2022年8月25日","excerpt":"<h1> 1. 优点</h1>\\n<ol>\\n<li>有助于保护原有系统，不受影响，并及时修改问题</li>\\n<li>可以实现用户的私人定制（比如是付费接口）</li>\\n<li>快速迭代</li>\\n</ol>\\n<h1> 2. API版本控制</h1>\\n<ul>\\n<li>在URL中追加版本或者作为查询字符串参数</li>\\n<li>通过自动以标头和通过接受标头</li>\\n</ul>\\n<h2> 2.1 安装组件</h2>\\n<p><a href=\\"http://ASP.NET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ASP.NET</a> API versioning为您提供了一种功能强大但易于使用的方法，用于将API版本控制语义添加到使用ASP.NET构建的新的和现有的REST服务中。API版本控制扩展定义了简单的元数据属性和约定，用于描述您的服务实现了哪些API版本。</p>","autoDesc":true}');export{e as data};
