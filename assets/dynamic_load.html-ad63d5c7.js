const e=JSON.parse('{"key":"v-8796eeb0","path":"/dotnetcore/small/dynamic_load.html","title":"简单动态加载示例","lang":"zh-CN","frontmatter":{"title":"简单动态加载示例","lang":"zh-CN","date":"2021-08-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNet"],"tag":["dynamic"],"description":"前言 在之前学习到如何将一个类库中的WebApi加载，那么本文就刚好用到了。 目的 实现一个可以动态加载，动态更新服务的插件需求。插件的好处是什么？我们可以编写代码来动态去替换或者增加现有服务接口等，使用得当的情况下风险小、操作方便。 AssemblyLoadContext AssemblyLoadContext 类是在 .NET Core 中引入的，在 .NET Framework 中不可用。在.Net5+和.NetCore的应用程序中均隐式使用它，它是运行时的提供程序，用来定位和加载依赖项，只要加载了依赖项，就会调用它的示例来定位该依赖项目。","head":[["meta",{"property":"og:url","content":"https://azrng.github.io/kbms/kbms/dotnetcore/small/dynamic_load.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"简单动态加载示例"}],["meta",{"property":"og:description","content":"前言 在之前学习到如何将一个类库中的WebApi加载，那么本文就刚好用到了。 目的 实现一个可以动态加载，动态更新服务的插件需求。插件的好处是什么？我们可以编写代码来动态去替换或者增加现有服务接口等，使用得当的情况下风险小、操作方便。 AssemblyLoadContext AssemblyLoadContext 类是在 .NET Core 中引入的，在 .NET Framework 中不可用。在.Net5+和.NetCore的应用程序中均隐式使用它，它是运行时的提供程序，用来定位和加载依赖项，只要加载了依赖项，就会调用它的示例来定位该依赖项目。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-09T02:19:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"dynamic"}],["meta",{"property":"article:published_time","content":"2021-08-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-09T02:19:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单动态加载示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-25T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-09T02:19:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"版本控制","slug":"版本控制","link":"#版本控制","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"创建插件基础类库","slug":"创建插件基础类库","link":"#创建插件基础类库","children":[]},{"level":3,"title":"创建宿主程序","slug":"创建宿主程序","link":"#创建宿主程序","children":[]}]},{"level":2,"title":"动态替换服务","slug":"动态替换服务","link":"#动态替换服务","children":[]},{"level":2,"title":"动态增加接口","slug":"动态增加接口","link":"#动态增加接口","children":[]},{"level":2,"title":"创建带依赖项的插件","slug":"创建带依赖项的插件","link":"#创建带依赖项的插件","children":[]}],"git":{"createdTime":1670219403000,"updatedTime":1670552357000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":10.12,"words":3036},"filePathRelative":"dotnetcore/small/dynamic_load.md","localizedDate":"2021年8月25日","excerpt":"<h1> 前言</h1>\\n<p>在之前学习到如何将一个类库中的WebApi加载，那么本文就刚好用到了。</p>\\n<h1> 目的</h1>\\n<p>实现一个可以动态加载，动态更新服务的插件需求。插件的好处是什么？我们可以编写代码来动态去替换或者增加现有服务接口等，使用得当的情况下风险小、操作方便。</p>\\n<h1> AssemblyLoadContext</h1>\\n<p>AssemblyLoadContext 类是在 .NET Core 中引入的，在 .NET Framework 中不可用。在.Net5+和.NetCore的应用程序中均隐式使用它，它是运行时的提供程序，用来定位和加载依赖项，只要加载了依赖项，就会调用它的示例来定位该依赖项目。</p>","autoDesc":true}');export{e as data};
