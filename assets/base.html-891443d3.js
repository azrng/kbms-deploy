import{_ as p,W as c,X as o,Y as n,Z as s,$ as e,a0 as t,C as l}from"./framework-63781bb7.js";const i={},u=t('<h1 id="ioc-控制反转" tabindex="-1"><a class="header-anchor" href="#ioc-控制反转" aria-hidden="true">#</a> IOC(控制反转)</h1><h3 id="导航" tabindex="-1"><a class="header-anchor" href="#导航" aria-hidden="true">#</a> 导航</h3><ul><li>共享充电宝</li><li>IOC思想 <ul><li>复杂的依赖关系</li><li>IOC定义</li></ul></li><li>Spring中的IOC <ul><li>IOC与工厂模式</li><li>IOC容器的技术剖析</li></ul></li><li>结语</li><li>参考</li></ul>',3),r={href:"https://www.52interview.com/book/36",target:"_blank",rel:"noopener noreferrer"},d=t('<blockquote><p>将对象自身从其依赖关系的管理中解放出来，将这个管理工作的责任交给第三方来完成。</p></blockquote><h3 id="共享充电宝" tabindex="-1"><a class="header-anchor" href="#共享充电宝" aria-hidden="true">#</a> 共享充电宝</h3><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202110031841.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="尴尬往事" tabindex="-1"><a class="header-anchor" href="#尴尬往事" aria-hidden="true">#</a> 尴尬往事</h4><p>手机早已成为我们生活中不可或缺的一部分,但是伴随而来的便是手机的充电问题。</p><p>大概在2011年,笔者和同学买好了回学校的火车票。因为是晚上6点半的火车票,所以笔者就想时间还早,正好自己也要去商场买点东西,便和同学约定晚上六点在火车站候车室会合,并将车票交给了同学。</p><p>下午五点半的时候,笔者便早早地出发前往火车站,大概二十分钟左右便到了车站。到站之后正好赶上排队检票(一般都是提前一个小时检票),但是尴尬地一幕发生了——手机没电了。眼看就要轮到我检票了,可车票还在我同学那里,我同学已经进站,在二楼候车室。我礼貌地请检票员想跳过我,先去检查后面的票,同时也在想办法联系我的同学。</p><p>我也想起来借一个电话或者打公用电话,但无奈没有记住同学的手机号码...眼看着排队检票的队伍都进站了,检查通道也开始准备关闭了。</p><p>这时多么希望自己带了充电线或者充电宝啊...</p><p>就在这时,我那同学突然从楼上冲下来,把车票给我,化解了这场尴尬。</p><p>因为手机没电且未带手机充电线出现的糗事其实不止这一件,我想生活中很多人都有过这样的经历。</p><p>时隔多年,可能很多同学会觉得这个很荒唐,为啥不用共享充电宝呢。因为,那个时候没有。</p><h4 id="共享充电宝-1" tabindex="-1"><a class="header-anchor" href="#共享充电宝-1" aria-hidden="true">#</a> 共享充电宝</h4><p>尽管这样的事情屡见不鲜,但是依然没有引起手机厂商的重视(直到今天手机电池的续航能力依然是个问题),通常我们在出门前会做一些准备避免这种事情的发生:</p><ul><li>多带一个手机</li><li>换一个大容量电池</li><li>带上电话本(以备不时之需)</li><li>带上充电宝</li></ul><p>但是以上几种方式依然是成本较高的,所以通常手机没电你大概率只能通过以下但是充电:</p><ul><li>找路人借充电宝</li><li>在饭店吃饭时，让店家帮忙充电</li><li>去住酒店充电 ...</li></ul><p>另外,因为手机厂商不同,充电线接口不一致,你可能还需要再去买一根充电线...</p><p>而以上这些不仅你的增加时间和金钱成本,还会增加新沟通成本。</p><p>所以,共享充电宝应用而生,他为用户提供了各种型号的充电线和电源,用户只扫码支付即可使用。</p><p><strong>共享充电宝的模式就是把充电过程中的所有设备和过程打包成一个盒子(类似于容器),这一点和软件架构的IOC思想不谋而合。</strong></p><h3 id="ioc思想" tabindex="-1"><a class="header-anchor" href="#ioc思想" aria-hidden="true">#</a> IOC思想</h3><p><strong>IOC</strong>(Inversion of Control) 控制反转是一种面对对象编程的设计原则，用于降低代码之间的耦合度。其基本思想是借助第三方实现具有依赖关系的对象之间的解耦。</p><h4 id="对象之间复杂的依赖关系" tabindex="-1"><a class="header-anchor" href="#对象之间复杂的依赖关系" aria-hidden="true">#</a> 对象之间复杂的依赖关系</h4><p>在面向对象方法设计的软件系统中，它的底层实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。</p>',25),k={href:"https://www.52interview.com/book/36/360",target:"_blank",rel:"noopener noreferrer"},m=t('<figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/16332444563494.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中的齿轮组，它拥有多个独立的齿轮，这些齿轮相互啮合在一起，协同工作，共同完成某项任务。我们可以看到，在这样的齿轮组中，如果有一个齿轮出了问题，就可能会影响到整个齿轮组的正常运转。</p><p><strong>齿轮组中齿轮之间的啮合关系,与软件系统中对象之间的耦合关系非常相似。对象之间的耦合关系是无法避免的，也是必要的，这是协同工作的基础。</strong></p><p>但是随着软件系统的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系。</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/16332465394191.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为了解决对象之间的耦合度过高的问题，软件专家提出了IOC理论，用来实现对象之间的“解耦”，目前这个理论已经被成功地应用到实践当中。</p><h4 id="ioc的定义" tabindex="-1"><a class="header-anchor" href="#ioc的定义" aria-hidden="true">#</a> IOC的定义</h4>',7),v={href:"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025",target:"_blank",rel:"noopener noreferrer"},b=t('<p>既然名字叫做控制反转,我们来看看，控制什么，反转什么。</p><p>早在2004年，Martin Fowler就提出了“哪些方面的控制被反转了？”这个问题。他总结出是依赖对象的获得被反转了，因为大多数应用程序都是由两个或是更多的类通过彼此的合作来实现企业逻辑，这使得每个对象都需要获取与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么这将导致代码高度耦合并且难以维护和调试</p><ul><li>控制什么：控制对象的创建和销毁，指的是控制对象的生命周期。</li><li>反转什么：之前我们创建一个对象都是new，现在有了IOC了，指的是把对象的控制权交给了IOC容器。</li></ul><p>IOC借助于“第三方”实现具有依赖关系的对象之间的解耦，如下图：</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/16332494588800.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p><p>为了更加直观的理解,我们可以把IOC拿掉,这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/16332497557414.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后,我们用一张图把IOC引入的过程串起来。</p><figure><img src="https://img.zhikestreet.com/202110021634.png?imageView2/0/q/75|watermark/2/text/NTJJbnRlcnZpZXc=/font/5a6L5L2T/fontsize/240/fill/IzBFMDkwNQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',10),g={href:"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025",target:"_blank",rel:"noopener noreferrer"},h=t(`<h3 id="spring中的ioc" tabindex="-1"><a class="header-anchor" href="#spring中的ioc" aria-hidden="true">#</a> Spring中的IOC</h3><h4 id="ioc与工厂模式" tabindex="-1"><a class="header-anchor" href="#ioc与工厂模式" aria-hidden="true">#</a> IOC与工厂模式</h4><blockquote><p>IOC的实现主要用到了3种技术：工厂模式、XML解析、反射。</p></blockquote><p>工厂模式在Java/C#中开发中应用广泛。</p><p>在工厂模式中，我们不会将对象创建逻辑暴露给客户端，使用一个通用的接口引用新创建的对象。</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202110041806.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>工厂模式的实现比较简单</p><ul><li>客户端(client)需要一个<em>product</em>对象,无须通过<em>new</em>关键字直接创建,而是向工厂(factory)发起一个获取新对象请求。这个过程中,客户端(client)只需要提供自己需要的对象的类型相关信息即可。</li><li>工厂(factory) 实例化一个具体的<strong>product</strong>对象,然后返回给到客户端(client)新的<em>product</em>对象(转换为抽象类类型)。</li><li>客户端使用<em>product</em>对象而不用了解具体的实现细节。</li></ul><p>按照惯例,这里还是给个简单demo</p><h4 id="步骤1" tabindex="-1"><a class="header-anchor" href="#步骤1" aria-hidden="true">#</a> 步骤1</h4><p>创建一个接口 Shape.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤2" tabindex="-1"><a class="header-anchor" href="#步骤2" aria-hidden="true">#</a> 步骤2</h4><p>创建实现相同接口的具体类。如下所示几个类</p><p>Rectangle.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Inside Rectangle::draw() method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Square.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Inside Square::draw() method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Circle.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Inside Circle::draw() method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤3" tabindex="-1"><a class="header-anchor" href="#步骤3" aria-hidden="true">#</a> 步骤3</h4><p>创建工厂根据给定的信息生成具体类的对象 ShapeFactory.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>

   <span class="token comment">//use getShape method to get object of type shape </span>
   <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>shapeType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>        
      <span class="token keyword">if</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;CIRCLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;RECTANGLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;SQUARE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤4" tabindex="-1"><a class="header-anchor" href="#步骤4" aria-hidden="true">#</a> 步骤4</h4><p>使用工厂通过传递类型等信息来获取具体类的对象。 FactoryPatternDemo.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryPatternDemo</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ShapeFactory</span> shapeFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//get an object of Circle and call its draw method.</span>
      <span class="token class-name">Shape</span> shape1 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">&quot;CIRCLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//call draw method of Circle</span>
      shape1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//get an object of Rectangle and call its draw method.</span>
      <span class="token class-name">Shape</span> shape2 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">&quot;RECTANGLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//call draw method of Rectangle</span>
      shape2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//get an object of Square and call its draw method.</span>
      <span class="token class-name">Shape</span> shape3 <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">&quot;SQUARE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">//call draw method of circle</span>
      shape3<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入工厂模式的优势很明显: 增加新的<em>shape</em>(如 triangle 三角形),我们也不用修改现有的架构,而只需要在<em>ShapeFactory</em>中通过(if else/switch)进行扩展。</p><p>上面这种方式工厂实现的方式原理是根据传入的某个参数获取一个对象，一旦我们新增一个shape类型,就修改ShapeFactory 类。这种方式不够灵活,并违背了软件设计的开闭原则。</p><p><strong>利用反射，每当新增接口子类，无需去修改工厂类代码就可以很方便的进行接口子类扩容。</strong></p><blockquote><p>Note: Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。(百度百科-JAVA反射机制)</p></blockquote><p>我们只需要对<strong>ShapeFactory</strong>进行改造,如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ShapeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Shape</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Shape</span> shape <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> shape<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们将类名作为参数传递给工厂,工厂利用反射机制找到对应的对象,并创建实例。</p><p>什么?? 你说没有看到反射的影子。那就进到Class.forName去看看吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CallerSensitive</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">forName</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span>
                <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
     <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller <span class="token operator">=</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token function">forName0</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后,我们再来个测试用例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">void</span> <span class="token function">testReflectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token doc-comment comment">/**
		 * get circle instance
		 * */</span>
		<span class="token class-name">Shape</span> shapeCircle <span class="token operator">=</span> <span class="token class-name">ShapeFactory</span>
				<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;com.zhike.blogmanager.Shape.Circle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		shapeCircle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
		 * get rectangle instance
		 * */</span>
		<span class="token class-name">Shape</span> shapeRectangle <span class="token operator">=</span> <span class="token class-name">ShapeFactory</span>
				<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;com.zhike.blogmanager.Shape.Rectangle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		shapeRectangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
		 * get square instance
		 * */</span>
		<span class="token class-name">Shape</span> shapeSquare <span class="token operator">=</span> <span class="token class-name">ShapeFactory</span>
				<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;com.zhike.blogmanager.Shape.Square&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		shapeSquare<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看执行结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">50.514</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zhike<span class="token punctuation">.</span>blogwebapi<span class="token punctuation">.</span></span>BlogWebapiApplicationTests</span> <span class="token operator">-</span> <span class="token class-name">Started</span> <span class="token class-name">BlogWebapiApplicationTests</span> in <span class="token number">6.359</span> seconds <span class="token punctuation">(</span><span class="token constant">JVM</span> running <span class="token keyword">for</span> <span class="token number">8.133</span><span class="token punctuation">)</span>
<span class="token class-name">Inside</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token namespace">method<span class="token punctuation">.</span></span>
Inside</span> <span class="token class-name">Rectangle</span><span class="token operator">::</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token namespace">method<span class="token punctuation">.</span></span>
Inside</span> <span class="token class-name">Square</span><span class="token operator">::</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token namespace">method<span class="token punctuation">.</span></span>

Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果来看,进一步验证了我们设想。</p><p>到了这里,有读者就会问了。你讲的工厂和IOC有啥关系呢? 还记得前面我提过:<strong>IOC的实现主要用到了3种技术：工厂模式、XML解析、反射</strong>。</p><h4 id="spring-ioc-技术剖析" tabindex="-1"><a class="header-anchor" href="#spring-ioc-技术剖析" aria-hidden="true">#</a> Spring IOC 技术剖析</h4><p>IOC容器其实就是一个大工厂，它用来管理我们所有的对象以及依赖关系。</p><ul><li>原理就是通过 Java 的反射技术来实现的！通过反射我们可以获取类的所有信息(成员变量、类名等等等)！</li><li>再通过配置文件(xml)或者注解来描述类与类之间的关系</li></ul><p>我们就可以通过这些配置信息和反射技术来构建出对应的对象和依赖关系了！</p><p>我们简单来看看实际Spring IOC容器是怎么实现对象的创建和依赖的：</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202110021708.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>根据Bean配置信息在容器内部创建Bean定义注册表</li><li>根据注册表加载、实例化bean、建立Bean与Bean之间的依赖关系</li><li>将这些准备就绪的Bean放到Map缓存池中，等待应用程序调用</li></ul><p>(1) BeanFactory</p><p>Spring Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多的 IOC 容器的实现供用户选择和使用， 其相互关系如下：</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/20211005155219.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>BeanFactory 作为最顶层的一个接口类，它定义了IOC容器的基本功能规范。</p><p>最基本的IOC容器接口BeanFactory</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 对 FactoryBean 的转义定义，因为如果使用 bean 的名字检索 FactoryBean 得到的对象是工厂生成的对象，
    如果需要得到工厂本身，需要转义
	 */</span>
	<span class="token class-name">String</span> <span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">;</span>


	<span class="token doc-comment comment">/**
	 *根据 bean 的名字，在 IOC 容器中获取 bean 实例
	 */</span>
	<span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 根据 bean 的名字和 Class 类型来得到 bean 实例，增加了类型安全验证机制。
	 */</span>
	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 根据名字和参数 在IOC容器中获取bean的实例
	 */</span>
	<span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 根据名字和参数 在IOC容器中获取bean的实例
	 */</span>
	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">ResolvableType</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 *提供对 bean 的检索，看看是否在 IOC 容器有这个名字的 bean
	 */</span>
	<span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 *根据 bean 名字得到 bean 实例，并同时判断这个 bean 是不是单例
	 */</span>
	<span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ResolvableType</span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeToMatch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 得到 bean 实例的 Class 类型
	 */</span>
	<span class="token annotation punctuation">@Nullable</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Nullable</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowFactoryBeanInit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 *得到 bean 的别名，如果根据别名检索，那么其原名也会被检索出来
	 */</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 BeanFactory 里只对 IOC 容器的基本行为作了定义，根本不关心你的 Bean 是如何定义怎样加载的。 正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。</p><p>而要知道工厂是如何产生对象的，我们需要看具体的IOC容器实现，Spring 提供了许多 IOC 容器的实现。比如XmlBeanFactory，ClasspathXmlApplicationContext等。</p><p>(2) BeanDefinition</p><p>SpringIOC 容器管理了我们定义的各种 Bean 对象及其相互的关系，Bean 对象在 Spring 实现中是以 BeanDefinition来描述的，其继承体系如下：</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/20211005163410.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,59),f={href:"https://github.com/spring-projects/spring-framework",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"结语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),s(" 结语")],-1),y=n("p",null,"IOC不是什么技术，而是一种设计思想。",-1),C=n("p",null,[n("strong",null,"在Spring 开发中，由IOC容器控制对象的创建、初始化、销毁等。这也就实现了对象控制权的反转，由我们对对象的控制转变成了Spring IOC 对对象的控制。")],-1),S=n("p",null,"以上只是笔者个人对Spring IOC的一点看法和思考,欢迎大家共同探讨和文明交流。",-1),_=n("h3",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),s(" 参考")],-1),I={href:"https://www.cnblogs.com/zhaojianhui/p/13455805.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.oodesign.com/factory-pattern.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.runoob.com/design-pattern/factory-pattern.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://blog.csdn.net/wuyuwei/article/details/87557629",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/lj1314ailj/article/details/80352054",target:"_blank",rel:"noopener noreferrer"},E={href:"https://segmentfault.com/a/1190000022015914",target:"_blank",rel:"noopener noreferrer"},T=n("h1",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料","aria-hidden":"true"},"#"),s(" 资料")],-1),N={href:"https://www.cnblogs.com/lucky_hu/p/15378130.html",target:"_blank",rel:"noopener noreferrer"};function F(R,A){const a=l("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("本节是摘自"),n("a",r,[s("《Spring Boot 实战纪实》"),e(a)]),s("的第13篇,感谢您的阅读,预计阅读时长3min。")]),d,n("blockquote",null,[n("p",null,[s("Note: 关于面向对象请查看"),n("a",k,[s("《类和实例通俗理解》"),e(a)])])]),m,n("p",null,[s("控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。("),n("a",v,[s("百度百科"),e(a)]),s(")")]),b,n("blockquote",null,[n("p",null,[s("Note: IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚，并没有包含在GoF中。详细查看"),n("a",g,[s("百度百科-控制反转"),e(a)])])]),h,n("p",null,[s("Spring IOC的实现过程比较复杂,相关的源码可以研究一下。感兴趣的同学可以下载源码查阅"),n("a",f,[s("spring-framework源码"),e(a)])]),w,y,C,S,_,n("ul",null,[n("li",null,[n("a",I,[s("Spring中IOC的理解》"),e(a)])]),n("li",null,[n("a",x,[s("百度百科-控制反转"),e(a)])]),n("li",null,[n("a",O,[s("Factory Pattern"),e(a)])]),n("li",null,[n("a",B,[s("工厂模式"),e(a)])]),n("li",null,[n("a",j,[s("Spring IoC 最全源码详解之bean实例化过程"),e(a)])]),n("li",null,[n("a",q,[s("Spring5源码分析(一) IOC和Spring 核心容器体系结构"),e(a)])]),n("li",null,[n("a",E,[s("Spring IOC知识点总结"),e(a)])])]),T,n("p",null,[s("来自戎码一生： "),n("a",N,[s("https://www.cnblogs.com/lucky_hu/p/15378130.html"),e(a)])])])}const z=p(i,[["render",F],["__file","base.html.vue"]]);export{z as default};
