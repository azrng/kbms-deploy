import{_ as t,V as r,W as s,X as e,Y as a,Z as n,$ as d,C as l}from"./framework-fde89294.js";const c={},o=e("h1",{id:"开篇语",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开篇语","aria-hidden":"true"},"#"),a(" 开篇语")],-1),p=e("p",null,"自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。",-1),g=e("blockquote",null,[e("p",null,"本次示例环境：vs2019、net5、docker、postman")],-1),m=e("h1",{id:"创建项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建项目","aria-hidden":"true"},"#"),a(" 创建项目")],-1),u={href:"http://xn--vs2019ASP-kd7ni4au1d49n9v2cruwtqdb4vks6bfofo9hx78k.NET",target:"_blank",rel:"noopener noreferrer"},b=d(`<p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png" alt="image.png" loading="lazy">image.png</p><p>目标框架是.Net5，无需身份验证，不配置HTTPS(根据个人需求勾选)，启动Docker(我习惯于后期添加)，启用OpenAPI支持(添加swagger文档)</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620113847152-b27a4e87-8ccf-4527-94a9-de6786468dde.png" alt="image.png" loading="lazy">image.png</p><h2 id="默认配置" tabindex="-1"><a class="header-anchor" href="#默认配置" aria-hidden="true">#</a> 默认配置</h2><p>创建完成后，我们查看项目目录为下</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620114885227-ae67bc3b-34e6-432d-b62c-8ef1575cbb97.png" alt="image.png" loading="lazy">image.png</p><p>我们直接F5启动项目，发现直接跳转一个API文档页面</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620114980256-a86bd9cb-359f-4ca7-aa3b-9bad47194332.png" alt="image.png" loading="lazy">image.png</p><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p></blockquote><h2 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置" aria-hidden="true">#</a> 修改配置</h2><p>我基于个人习惯，我修改launchSettings.json文件，删除IIS配置，删除后如下所示：</p><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>{
  &quot;profiles&quot;: {
    &quot;Net5ByDocker&quot;: {
      &quot;commandName&quot;: &quot;Project&quot;,
      &quot;launchBrowser&quot;: true,
      &quot;launchUrl&quot;: &quot;swagger&quot;,
      &quot;environmentVariables&quot;: {
        &quot;ASPNETCORE_ENVIRONMENT&quot;: &quot;Development&quot;
      },
      &quot;dotnetRunMessages&quot;: &quot;true&quot;,
      &quot;applicationUrl&quot;: &quot;http://localhost:5000&quot;
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除默认控制器，添加新的控制器UserController，在里面添加默认一些方法操作，如下</p><blockquote><p>基于个人习惯的操作，也可以不删除默认控制器</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    [Route(&quot;api/[controller]/[action]&quot;)]
    [ApiController]
    public class UserController : ControllerBase
    {
        public static List&lt;string&gt; userInfo = new();

        [HttpGet]
        public IEnumerable&lt;string&gt; Get()
        {
            return userInfo;
        }

        [HttpPost]
        public List&lt;string&gt; Post([FromBody] string value)
        {
            if (!string.IsNullOrWhiteSpace(value))
                userInfo.Add(value);
            return userInfo.ToList();
        }

        [HttpDelete(&quot;{id}&quot;)]
        public List&lt;string&gt; Delete(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
                userInfo.Remove(id);
            return userInfo.ToList();
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他配置保持默认，启动项目</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620125723376-4c9d566d-96ab-4efc-946f-5e0a8f8c1880.png" alt="image.png" loading="lazy">image.png</p><h1 id="生成镜像" tabindex="-1"><a class="header-anchor" href="#生成镜像" aria-hidden="true">#</a> 生成镜像</h1><h2 id="添加dockerfile" tabindex="-1"><a class="header-anchor" href="#添加dockerfile" aria-hidden="true">#</a> 添加dockerfile</h2><p>选中项目右键添加docker支持，本次部署在windows平台</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620126200751-8af1177d-27a2-4e0a-af9c-5b775bc5d897.png" alt="image.png" loading="lazy">image.png</p><blockquote><p>拉取基础镜像和sdk，还原nuget包，重新生成，发布</p></blockquote><p>此时项目的目录结构为</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620126343906-3c39dff8-efbc-4923-b0be-e4e3c708bc36.png" alt="image.png" loading="lazy">image.png</p><h2 id="运行命令" tabindex="-1"><a class="header-anchor" href="#运行命令" aria-hidden="true">#</a> 运行命令</h2><p>在文件资源管理器打开文件</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620126434943-262542b9-3891-4176-a902-969110ecdbef.png" alt="image.png" loading="lazy">image.png</p><p>在上层目录下运行cmd输入命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -f .\\Net5ByDocker\\Dockerfile -t net5sample .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>在不同的目录下命令有些许差异，这点非常感谢我的朋友<strong>王老师</strong></p></blockquote><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620126753488-31720434-e70e-4786-b066-a945f799514f.png" alt="image.png" loading="lazy">image.png</p><blockquote><p>注意：可能部分朋友在这一步会拉取官方镜像比较慢，可以配置docker加速器使用</p></blockquote><p>通过docker客户端查看我们已经生成的镜像</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620126993761-4b491825-c995-428d-8b70-73cca1f61e50.png" alt="image.png" loading="lazy">image.png</p><h1 id="生成容器" tabindex="-1"><a class="header-anchor" href="#生成容器" aria-hidden="true">#</a> 生成容器</h1><p>本文通过<strong>Terminal</strong>软件执行命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name net5sampleone -d -p 8060:80 net5sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>命令简述：</p><p>-d 后台运行</p><p>--name 容器名称</p><p>-p 端口映射</p></blockquote><p>截至到这，我们已经把刚才的项目生成了容器，下面我们可以直接通过容器访问上面的项目</p><h1 id="验证项目" tabindex="-1"><a class="header-anchor" href="#验证项目" aria-hidden="true">#</a> 验证项目</h1><p>通过浏览器访问地址：localhost:8060/swagger</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620127336787-2035f32c-1ee8-43cf-9f98-1365a01f939f.png" alt="image.png" loading="lazy">image.png</p><p>懵逼！！！这个时候不是应该出来swagger文档的界面吗？难道我们部署的方式有问题？</p><p>让我们访问下项目的接口</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620127500213-09647065-50fa-4f69-a6dd-ba1d55139118.png" alt="image.png" loading="lazy">image.png</p><p>说明我们的项目运行是正常的，仔细查看swagger配置后发现，因为为了安全默认不允许发布后出来swagger文档</p><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620128138104-9e5826f4-d51d-48f8-892d-332f30e05540.png" alt="image.png" loading="lazy">image.png</p><blockquote><p>如果是测试环境或者特殊情况可以通过调整swagger配置位置来显示文档</p></blockquote><h2 id="通过postman访问" tabindex="-1"><a class="header-anchor" href="#通过postman访问" aria-hidden="true">#</a> 通过Postman访问</h2><h3 id="添加用户" tabindex="-1"><a class="header-anchor" href="#添加用户" aria-hidden="true">#</a> 添加用户</h3><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620127732462-86f9b796-901c-48ad-b4fe-50e1e7e0329c.png" alt="image.png" loading="lazy">image.png</p><h3 id="查询用户" tabindex="-1"><a class="header-anchor" href="#查询用户" aria-hidden="true">#</a> 查询用户</h3><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620127757485-a736e466-acf6-4bba-9e41-142896f6c372.png" alt="image.png" loading="lazy">image.png</p><h3 id="删除用户" tabindex="-1"><a class="header-anchor" href="#删除用户" aria-hidden="true">#</a> 删除用户</h3><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1620127785048-7e6a416c-2cdd-4168-a9af-03949f8046cb.png" alt="image.png" loading="lazy">image.png</p><p>再次运行查询接口数据已经为空了。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,57),h={href:"https://docs.gitlab.com/ee/ci/environments/index.html",target:"_blank",rel:"noopener noreferrer"};function v(f,k){const i=l("ExternalLinkIcon");return r(),s("div",null,[o,p,g,m,e("p",null,[e("a",u,[a("本次事例代码是用过vs2019创建的ASP.NET"),n(i)]),a(" Core Web API项目")]),b,e("p",null,[e("a",h,[a("https://docs.gitlab.com/ee/ci/environments/index.html"),n(i)])])])}const x=t(c,[["render",v],["__file","docker.html.vue"]]);export{x as default};
