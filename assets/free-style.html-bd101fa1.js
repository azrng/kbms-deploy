import{_ as t,V as d,W as l,X as e,Y as i,Z as n,$ as r,C as s}from"./framework-fde89294.js";const g={},c=r(`<h1 id="构建自由风格任务" tabindex="-1"><a class="header-anchor" href="#构建自由风格任务" aria-hidden="true">#</a> 构建自由风格任务</h1><p>实现目的：通过jenkins在服务器部署一个简单的.Net程序</p><h1 id="_1-登录并创建任务" tabindex="-1"><a class="header-anchor" href="#_1-登录并创建任务" aria-hidden="true">#</a> 1. 登录并创建任务</h1><p>输入任务名称并选择构建一个自由风格的任务</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101438629.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2. 配置</h1><h2 id="_2-1-常规" tabindex="-1"><a class="header-anchor" href="#_2-1-常规" aria-hidden="true">#</a> 2.1 常规</h2><p>设置描述和丢弃规则</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439057.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-2-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-2-源码管理" aria-hidden="true">#</a> 2.2 源码管理</h2><p>配置源代码和凭据</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439460.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-3-构建触发器" tabindex="-1"><a class="header-anchor" href="#_2-3-构建触发器" aria-hidden="true">#</a> 2.3 构建触发器</h2><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439442.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-构建环境" tabindex="-1"><a class="header-anchor" href="#_2-4-构建环境" aria-hidden="true">#</a> 2.4 构建环境</h2><p>设置每次构建的时候删除之前的文件(我主要是想保持文件最新，奈何没找到拉取代码的方式，参考文档里面有方法)</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439427.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-5-构建" tabindex="-1"><a class="header-anchor" href="#_2-5-构建" aria-hidden="true">#</a> 2.5 构建</h2><p>通过执行shell脚本来来构建</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439085.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过编写shell脚本来部署.NetCore项目</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>image_tag=\`date +%Y%m%d%H%M%S\`;
echo $image_tag;

# build镜像并且打上tag  dockerfile路径根据不同项目地址不同
docker build -f ./Net5ByDocker/Dockerfile -t net5bydocker:$image_tag .;
docker images;

# 停止并删除旧版 net5bydocker 容器
CID=$(docker ps | grep &quot;net5bydocker&quot; | awk &#39;{print $1}&#39;)
echo $CID
if [ &quot;$CID&quot; != &quot;&quot; ];then
  docker stop $CID
  docker rm $CID
fi

# 把刚刚build出来的镜像跑起来
docker run -p 8012:80 --name net5bydocker -d net5bydocker:$image_tag;
docker ps -a;
docker logs net5bydocker;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o={href:"https://www.cnblogs.com/xiaoxiaotank/p/14762665.html",target:"_blank",rel:"noopener noreferrer"},h=r(`<h2 id="_2-6-构建后操作" tabindex="-1"><a class="header-anchor" href="#_2-6-构建后操作" aria-hidden="true">#</a> 2.6 构建后操作</h2><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439084.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_3-开始构建" tabindex="-1"><a class="header-anchor" href="#_3-开始构建" aria-hidden="true">#</a> 3. 开始构建</h1><p>点击保存后点击立即构建，就会在下面可以看到构建历史列表(出现蓝色代表构建成功，红色代表有问题)</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439635.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>构建完成后我们查看linux服务器是否已经有刚部署项目的容器</p><figure><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/1624778314838-53227adc-9037-4752-8875-271f1b982d35.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-3-查看输出" tabindex="-1"><a class="header-anchor" href="#_2-3-查看输出" aria-hidden="true">#</a> 2.3 查看输出</h2><p>通过在指定的build ID下选择输出控制台查看详细信息</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439243.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-默认工作目录" tabindex="-1"><a class="header-anchor" href="#_2-4-默认工作目录" aria-hidden="true">#</a> 2.4 默认工作目录</h2><p>通过输出信息我们可以看到jenkins默认的工作目录是我们配置的目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/var/jenkins_home/workspace/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439429.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_4-预览效果" tabindex="-1"><a class="header-anchor" href="#_4-预览效果" aria-hidden="true">#</a> 4. 预览效果</h1><p>通过我们的shell配置，我们访问我们的swagger地址</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://192.168.1.14:8012/swagger/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439418.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>调用接口发现可以查询到数据</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog/202212101439150.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这点常见的错误就是连接数据库的地址配置有问题，如果这里有问题，可以通过命令去查看docker日志</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs 容器Id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_5-参考文档" tabindex="-1"><a class="header-anchor" href="#_5-参考文档" aria-hidden="true">#</a> 5. 参考文档</h1>`,23),p={href:"https://www.cnblogs.com/yanjieli/p/10613212.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/xiaoxiaotank/p/14762665.html",target:"_blank",rel:"noopener noreferrer"};function u(f,b){const a=s("ExternalLinkIcon");return d(),l("div",null,[c,e("p",null,[i("脚本参考自："),e("a",o,[i("https://www.cnblogs.com/xiaoxiaotank/p/14762665.html"),n(a)])]),h,e("p",null,[i("GitLab+Jenkins持续集成+自动化部署： "),e("a",p,[i("https://www.cnblogs.com/yanjieli/p/10613212.html"),n(a)])]),e("p",null,[i("xiaoxiaotank："),e("a",m,[i("https://www.cnblogs.com/xiaoxiaotank/p/14762665.html"),n(a)])])])}const x=t(g,[["render",u],["__file","free-style.html.vue"]]);export{x as default};
