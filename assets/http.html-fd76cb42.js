import{_ as n,W as h,X as o,Y as e,Z as t,$ as r,a0 as p,C as l}from"./framework-63781bb7.js";const s={},i=p('<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><p>HTTP协议是用于从www服务器传输超文本到本地浏览器的传送协议，使浏览器更加高效，使网络传输减少，保证计算机正确的传输超文本文档，还确定传输文档中的那个部分，以及那部分内容首先显示等</p><p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</p><p>HTTP协议通常承载于TCP协议之上，有时也承载与TLS/SSL(<strong>传输层安全协议</strong>)协议层之上，默认的http端口是80，HTTPS的端口号为443；</p><p>HTTP协议永远都是客户端发起请求，服务器回送响应。限制无法在客户端未发送请求的情况下将消息推送给客户端。</p><h1 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点" aria-hidden="true">#</a> 主要特点</h1><p>1， 支持客户/服务器模式。2简单快速，3灵活(允许传输任意类型的数据对象，用content-Type加以标记)，4无连接，5无状态；</p><p>2， HTTP请求由三个部分组成，分别是请求行，消息报头，请求正文。</p><p>3， 请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本号格式如下，MethodRequest-URI Http-Version CRLF</p><p><strong>关于Method 各个方法解释如下</strong></p><ul><li>GET 请求获取Request-URI所标识的资源，在浏览器的地址栏中输入网址的方式访问网页时，浏览器采用GET方法向服务器获取资源</li><li>POST 在Request-URI所标识的资源后附加新的数据，POST方法要求被请求服务器接受附在请求后面的数据，常用于提交表单。</li><li>HEAD 请求获取由Request-URI所标识的资源的响应消息头</li><li>PUT 请求服务器存储一个资源，并用Request-URI作为其标识</li></ul><h1 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h1><ol><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ol><h1 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h1><h2 id="tcp和http的关系" tabindex="-1"><a class="header-anchor" href="#tcp和http的关系" aria-hidden="true">#</a> TCP和HTTP的关系</h2><p>HTTP协议基于TCP协议，HTTP协议需要依靠TCP协议来传输数据。TCP被称为面向连接的“传输层协议”，而HTTP层被称为“应用层协议”。</p><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><p>HTTPS可以理解为 HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL，用于安全的 HTTP 数据传输。 HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说 HTTPS 使用了隧道进行通信。 通过使用 SSL，HTTPs 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）</p><h2 id="http2" tabindex="-1"><a class="header-anchor" href="#http2" aria-hidden="true">#</a> HTTP2</h2><blockquote><p>理解为是HTTP1.1的升级版</p></blockquote><p>解决了1.1的长连接会遇到阻塞的问题。它采用的是多路复用的形式去解决这个问题。什么是多路复用呢？就是一个通道可以让多条线路同时占用而不搞混。这里的作法是为每一个请求带一个编号，它样服务器方就能为请求的回应对上号了。如果一个请求时间过长，那么服务器就可以先暂停这个请求，先处理下一个请求，处理完再回来处理这个长请求，如果找回这个长请求呢，那就靠这个编号了。</p><p>特点</p><p>采用二进制的格式传输数据，1.1是文本格式</p><p>对消息头进行压缩传输，节约消息头占用的网络流量。</p><p>异步连接多路复用。</p><p>保持1.1版本的兼容性。</p><h2 id="三次握手四次挥手" tabindex="-1"><a class="header-anchor" href="#三次握手四次挥手" aria-hidden="true">#</a> 三次握手四次挥手</h2><p>Tcp是一种面向连接的单播协议，在发送数据之前，通信双方必须建立一个连接(客户端和服务器的内存中要保存一份关于对方的信息，如IP地址、端口等)。</p><p>TCP提供了一种可靠的、面向连接、字节流、传输层的服务，采用三次握手来建立一个连接，采用四次挥手来关闭一个连接。</p>',29),c={href:"https://zhuanlan.zhihu.com/p/53374516",target:"_blank",rel:"noopener noreferrer"},T=e("h1",{id:"资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#资料","aria-hidden":"true"},"#"),t(" 资料")],-1),d={href:"http://kb.cnblogs.com/page/144577/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://kb.cnblogs.com/page/140611/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://www.cnblogs.com/cathsfz/archive/2012/06/19/2553431.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://www.cnblogs.com/vamei/archive/2012/12/05/2802811.html",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.ruanyifeng.com/blog/2011/09/restful.html",target:"_blank",rel:"noopener noreferrer"};function S(H,b){const a=l("ExternalLinkIcon");return h(),o("div",null,[i,e("p",null,[e("a",c,[t("https://zhuanlan.zhihu.com/p/53374516"),r(a)])]),T,e("p",null,[t("1："),e("a",d,[t("互联网协议入门"),r(a)])]),e("p",null,[t("2："),e("a",u,[t("HTTP协议漫谈"),r(a)])]),e("p",null,[t("3："),e("a",_,[t("HTTP 状态码详解"),r(a)])]),e("p",null,[t("4："),e("a",P,[t("协议森林"),r(a)])]),e("p",null,[t("5："),e("a",f,[t("restful"),r(a)]),t("（网络即软件）")])])}const g=n(s,[["render",S],["__file","http.html.vue"]]);export{g as default};
