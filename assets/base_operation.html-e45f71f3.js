import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as p,a as e,b as a,d as i,e as s}from"./app-3c3dee46.js";const c={},l=e("h2",{id:"git安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git安装","aria-hidden":"true"},"#"),a(" Git安装")],-1),o={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},g={href:"https://gitforwindows.org/",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>安装完成后找到Git Bash，然后出来一个类似于命令窗口的东西，就说明Git安装成功了</p><p>安装成功后，还需要最后一步的设置，在命令行输入</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git config <span class="token operator">--</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">&quot;Your Name&quot;</span>
git config <span class="token operator">--</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">&quot;email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为Git是分布式版本控制系统，所以每个机器都必须自报家门：你的名字和email地址。</p><p>注意：git conifg命令中的--globdal参数，这就表示你的这台机器上所有的Git仓库都使用这个地址。也可以对每个仓库指定不同的名称和email地址。</p><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h2><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><p>将本地一个文件夹变为Git可以管理的仓库</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="拉取仓库" tabindex="-1"><a class="header-anchor" href="#拉取仓库" aria-hidden="true">#</a> 拉取仓库</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git <span class="token class-name">clone</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>用户名<span class="token punctuation">:</span>密码@仓库地址

<span class="token preprocessor property"># 拉取某一分支</span>
git clone <span class="token operator">-</span>b 分支名 https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>gitee<span class="token punctuation">.</span>com<span class="token operator">/</span>AZRNG<span class="token operator">/</span><span class="token keyword">event</span><span class="token operator">-</span>bus<span class="token punctuation">.</span>git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git创建版本库" tabindex="-1"><a class="header-anchor" href="#git创建版本库" aria-hidden="true">#</a> Git创建版本库</h3><p>版本库又叫做仓库，英文名称是repository，你可以理解为是一个目录，这目录里面所有的问题都可以被Git管理起来，每一个文件的修改删除Git都可以进行跟踪，以便任何时刻都可以追踪历史或在将来的某一个时间可以还原。</p><p>创建版本库，找到一个合适的地方，然后右键选择Git Bash Here</p><p>命令：mkdir learngit</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132231768.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>进入这个目录</p><p>命令：cd learngit</p><p>显示当前目录</p><p>命令：pwd</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132231006.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过 git init 命令可以把这个目录变成Git可以管理的仓库</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132231101.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后我们就建好了一个空的仓库，在查看隐藏项目的条件下，我们可以看见都一个.git的目录，这个是Git用来跟踪管理版本文件的。或者使用ls -ah命令就可以看见。</p><h3 id="git添加文件" tabindex="-1"><a class="header-anchor" href="#git添加文件" aria-hidden="true">#</a> Git添加文件</h3><p>在仓库下创建一个文件为readme.txt，接着我们使用命令 git add告诉Git，把文件添加到仓库。</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132231833.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="git提交" tabindex="-1"><a class="header-anchor" href="#git提交" aria-hidden="true">#</a> Git提交</h3><p>使用git commit告诉Git，把文件提交到Git仓库</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132231479.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>-m后面是本次提交的说明，可以输入有意义的提交内容</p><p>1 file changed：一个文件被改动</p><p>2 insertions：插入了两行内容</p><p>Git的添加文件和提交文件区分开来的目的是，因为一次性提交多个文件，所以你可以多次add不同的文件。比如：</p><p>git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot;</p><h2 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作" aria-hidden="true">#</a> 分支操作</h2><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><p>创建dev分支</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git branch dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git切换分支" tabindex="-1"><a class="header-anchor" href="#git切换分支" aria-hidden="true">#</a> Git切换分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git <span class="token return-type class-name">checkout</span> <span class="token function">dev</span><span class="token punctuation">(</span>分支名称<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git查看当前分支" tabindex="-1"><a class="header-anchor" href="#git查看当前分支" aria-hidden="true">#</a> Git查看当前分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git branch <span class="token operator">-</span>a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>切换到主分支master，合并dev分支到当前分支master</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git branch <span class="token operator">-</span>d dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送分支" tabindex="-1"><a class="header-anchor" href="#推送分支" aria-hidden="true">#</a> 推送分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git push <span class="token operator">-</span>u origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><h3 id="创建标签" tabindex="-1"><a class="header-anchor" href="#创建标签" aria-hidden="true">#</a> 创建标签</h3><p>默认标签是打在最新提交的commit上</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git tag v1<span class="token punctuation">.</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git tag <span class="token operator">-</span>d v0<span class="token punctuation">.</span><span class="token number">1</span>
    
删除远程标签
git tag <span class="token operator">-</span>d v0<span class="token punctuation">.</span><span class="token number">9</span>
git <span class="token class-name">push</span> origin <span class="token punctuation">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span>v0<span class="token punctuation">.</span><span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推送标签到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送标签到远程仓库" aria-hidden="true">#</a> 推送标签到远程仓库</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token preprocessor property">#推送指定标签至远程</span>
git push origin v0<span class="token punctuation">.</span><span class="token number">1</span>
    
<span class="token preprocessor property">#推送全部标签至远程</span>
git push origin <span class="token operator">--</span>tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切换标签" tabindex="-1"><a class="header-anchor" href="#切换标签" aria-hidden="true">#</a> 切换标签</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token preprocessor property">#tag标签管理</span>
git tag

<span class="token preprocessor property">#切换</span>
git checkout tag值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="仓库信息" tabindex="-1"><a class="header-anchor" href="#仓库信息" aria-hidden="true">#</a> 仓库信息</h2><h3 id="查看仓库当前状态" tabindex="-1"><a class="header-anchor" href="#查看仓库当前状态" aria-hidden="true">#</a> 查看仓库当前状态</h3><p>继续修改readme.txt文件，然后我们运行git status命令查看结果</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>On branch masterChanges not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to <strong>update</strong>what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; <strong>to</strong> discard changes <strong>in</strong> working directory)</p><p>​ modified: readme.txt <strong>no</strong> changes added <strong>to commit</strong> (use &quot;git add&quot; <strong>and</strong>/<strong>or</strong> &quot;git commit -a&quot;)</p><p>这告诉我们readme.txt已经被吸怪了，但是还没有准备提交</p><h3 id="查看上次的修改" tabindex="-1"><a class="header-anchor" href="#查看上次的修改" aria-hidden="true">#</a> 查看上次的修改</h3><p>使用命令git diff</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git diff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>diff --git a/readme.txt b/readme.txt</p><p>index d8036c1..013b5bc 100644</p><p>--- a/readme.txt</p><p>+++ b/readme.txt</p><p>@@ -1,2 +1,2 @@</p><p>-Git is a version control system.</p><p>+Git is a distributed version control system.</p><p>Git is free software.</p><p>\\ No newline at end of file</p><p>再次提交修改后的文件到仓库，第一步是git add</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132232338.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再次提交</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132232526.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看文件状态</p><p>git statusOn branch masternothing to <strong>commit</strong>, working tree clean</p><h3 id="查看提交的历史记录" tabindex="-1"><a class="header-anchor" href="#查看提交的历史记录" aria-hidden="true">#</a> 查看提交的历史记录</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132232494.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>显示顺序是从最近到最远的提交日志</p><h3 id="git版本回退" tabindex="-1"><a class="header-anchor" href="#git版本回退" aria-hidden="true">#</a> Git版本回退</h3><p>Git中使用HEAD表示当前版本，上一个版本是HEAD<sup>,上上一个版本是HEAD</sup>^，往上100个版本是HEAD~100.</p><p>现在回退到上一个版本</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132232941.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看内容果然被还原了</p>`,95),u={href:"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192",target:"_blank",rel:"noopener noreferrer"},m=s(`<h3 id="清除已删除的远程分支" tabindex="-1"><a class="header-anchor" href="#清除已删除的远程分支" aria-hidden="true">#</a> 清除已删除的远程分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git fetch <span class="token operator">-</span>p（如果这个分支已经在本地也创建那么删除不掉）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除本地分支" tabindex="-1"><a class="header-anchor" href="#删除本地分支" aria-hidden="true">#</a> 删除本地分支</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>git branch <span class="token operator">-</span><span class="token generic-method"><span class="token function">d</span> <span class="token generic class-name"><span class="token punctuation">&lt;</span>branchName<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span>会在删除前检查merge状态，避免误删没有合并的分支<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改仓库对应地址" tabindex="-1"><a class="header-anchor" href="#更改仓库对应地址" aria-hidden="true">#</a> 更改仓库对应地址</h3><p>在仓库目录下右键Git Bash Here中输入命令：</p><p>查询关联</p><p>git remote -v</p><figure><img src="https://cdn.nlark.com/yuque/0/2021/png/272869/1609895610758-de53f895-e871-4140-a702-72b7af02de74.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>删除关联</p><p>git remote rm origin</p><p>添加关联</p><p>git remote add origin 新地址git链接</p><p>推送主分支：</p><p>git push -u origin master</p><p>推送其他分支</p><p>git push -u origin develop #</p><p>查看所有分支：</p><p>git branch -av</p><p>如果修改关联地址后出来呢问题：</p><p>See git-pull(1) for details</p><p>git pull &lt;remote&gt; &lt;branch&gt;</p><p>If you wish to set tracking information for this branch you can do so with:</p><p>git branch --set-upstream-to=origin/&lt;branch&gt; dev</p><p>那么运行命令：</p><p>git branch --set-upstream-to=origin/dev dev</p><h2 id="记住密码" tabindex="-1"><a class="header-anchor" href="#记住密码" aria-hidden="true">#</a> 记住密码</h2><p>场景：在git每次推送的和拉取的时候需要输入账号和密码，这是一件非常痛苦的事情，那么我们现在看下如何解决这种情况:</p><p>在Git项目的文件夹（包含隐藏文件.git文件夹的）内右键git bash here</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132236404.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后输入命令</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>git config  credential.helper store 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里没有--global意思是指只对这个仓库生效，建议以后都不要加--global，让代码配置以仓库为单位存储就好，设置成全局不灵活</p><p>打开.git文件夹的.config文件，回发现多了两行</p><figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212132236417.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后git push到远程仓库，输入用户名和密码，然后再次运行git push时候就不用输入用户名和密码了</p><p>删除已经保存的账户密码</p><p>克隆项目的时候，输错了一次密码，然后提示认证失败，然后后期再次输入密码啥等一直拉取不成功，如何让忘记密码再次输入密码</p><p>在仓库目录下运行git-bash 管理员方式运行</p><p>命令：git config --system --unset credential.helper #清除保存好的账号密码</p><p>之后会弹出用户名和密码，输入即可</p>`,41);function v(b,f){const n=r("ExternalLinkIcon");return d(),p("div",null,[l,e("p",null,[a("可以直接从官网下载安装程序，然后按照默认的选项进行安装 "),e("a",o,[a("https://git-scm.com/downloads"),i(n)]),a(" 或者 "),e("a",g,[a("https://gitforwindows.org/"),i(n)])]),h,e("p",null,[a("Git版本回退、撤销修改、删除文件 接着看网址："),e("a",u,[a("此处"),i(n)])]),m])}const y=t(c,[["render",v],["__file","base_operation.html.vue"]]);export{y as default};
