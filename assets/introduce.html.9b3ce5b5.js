import{_ as o,W as r,X as p,Y as n,Z as t,$ as s,a0 as a,y as c}from"./framework.e8a0537a.js";const l={},i=a('<h1 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> gRPC</h1><h1 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语" aria-hidden="true">#</a> 开篇语</h1><p>关于grpc用法我只是基本的使用，如果我用的方式不对，烦请指出来，一起讨论。</p><h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><p><img src="https://gitee.com/AZRNG/picture-storage/raw/master/kbms/202111282302103.png" alt="img" loading="lazy"></p><p>gRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webservice。</p>',6),h={href:"https://www.grpc.io",target:"_blank",rel:"noopener noreferrer"},u=a('<p>在服务器端，服务器实现此接口并运行grpc服务器以处理客户端调用(需要使用HTTP/2(https证书))。在客户端，客户端具有一个存根，提供与服务器相同的方法。</p><h1 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h1><h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>现代高性能轻量级 RPC 框架。</p><p>约定优先的 API 开发，默认使用 Protocol Buffers 作为描述语言，允许与语言无关的实现。</p><p>可用于多种语言的工具，以生成强类型的服务器和客户端。</p><p>支持客户端，服务器双向流调用。</p><p>通过Protocol Buffers二进制序列化减少网络使用。</p><p>基于 HTTP/2 进行传输</p><h2 id="推荐场景" tabindex="-1"><a class="header-anchor" href="#推荐场景" aria-hidden="true">#</a> 推荐场景</h2><p>高性能轻量级微服务 - gRPC设计为低延迟和高吞吐量通信，非常适合需要高性能的轻量级微服务。</p><p>多语言混合开发 - gRPC工具支持所有流行的开发语言，使gRPC成为多语言开发环境的理想选择。</p><p>点对点实时通信 - gRPC对双向流调用提供出色的支持。gRPC服务可以实时推送消息而无需轮询。</p><p>网络受限环境 - 使用 Protocol Buffers二进制序列化消息，该序列化始终小于等效的JSON消息，对网络带宽需求比JSON小。</p><h2 id="不建议场景" tabindex="-1"><a class="header-anchor" href="#不建议场景" aria-hidden="true">#</a> 不建议场景</h2><p>浏览器可访问的API - 浏览器不完全支持gRPC。虽然gRPC-Web可以提供浏览器支持，但是它有局限性，引入了服务器代理</p><p>广播实时通信 - gRPC支持通过流进行实时通信，但不存在向已注册连接广播消息的概念</p><p>进程间通信 - 进程必须承载HTTP/2才能接受传入的gRPC调用，对于Windows，进程间通信管道是一种更快速的方法。</p><p>注：尽管http/2协议没有明确规定需要使用https，但是为了安全在浏览器实现都要求使用https，所以现在的http/2话题https基本上是一对。</p><h2 id="net支持情况" tabindex="-1"><a class="header-anchor" href="#net支持情况" aria-hidden="true">#</a> .Net支持情况</h2>',20),d=n("li",null,[n("p",null,"提供了基于HttpClient的原生框架实现")],-1),g={href:"http://xn--ASP-oe0eq7ps91ajw1avlc.NET",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("p",null,"提供完整的代码生成工具")],-1),m=n("li",null,[n("p",null,"编译器提供对proto文件的智能提示")],-1),f=n("h1",{id:"tls",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tls","aria-hidden":"true"},"#"),t(" TLS")],-1),k=n("p",null,"gRPC基于Http2，默认情况下Http2是使用了Http的加密协议，用于 gRPC 的 Kestrel 终结点应使用TLS 进行保护。",-1),b={href:"http://xn--ASP-lp6el5qxyg.NET",target:"_blank",rel:"noopener noreferrer"},w={href:"https://localhost:5001",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>在生产环境中，必须显式配置 TLS。 以下 appsettings.json 示例中提供了使用 TLS 进行保护的 HTTP/2 终结点 ：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
 <span class="token string">&quot;Kestrel&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
   <span class="token string">&quot;Endpoints&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token string">&quot;HttpsInlineCertFile&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token string">&quot;Url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://localhost:5001&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;Protocols&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Http2&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;Certificate&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token string">&quot;Path&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;path to .pfx file&gt;&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;certificate password&gt;&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考教程" tabindex="-1"><a class="header-anchor" href="#参考教程" aria-hidden="true">#</a> 参考教程</h1>`,3),q={href:"https://docs.microsoft.com/zh-cn/aspnet/core/grpc/?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.grpc.io/docs/quickstart/csharp/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zhuanlan.zhihu.com/p/148139089",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.cnblogs.com/stulzq/p/11897704.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.cnblogs.com/Leo_wl/p/11593681.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://mp.weixin.qq.com/s/3--85-0CMMi81xyJC-8xjA",target:"_blank",rel:"noopener noreferrer"},N={href:"https://mp.weixin.qq.com/s/4DGZQTCm0DOxRrM8Nna_1w",target:"_blank",rel:"noopener noreferrer"};function S(H,L){const e=c("ExternalLinkIcon");return r(),p("div",null,[i,n("p",null,[t("gRPC官网："),n("a",h,[t("https://www.grpc.io"),s(e)])]),u,n("ul",null,[d,n("li",null,[n("p",null,[n("a",g,[t("提供原生的ASP.NET"),s(e)]),t(" Core集成库")])]),_,m]),f,k,n("p",null,[t("在开发环境中，"),n("a",b,[t("当存在ASP.NET"),s(e)]),t(" Core 开发证书时，会在 "),n("a",w,[t("https://localhost:5001"),s(e)]),t(" 自动创建使用 TLS 进行保护的终结点。 不需要任何配置。 https 前缀验证 Kestrel 终结点是否正在使用TLS。")]),v,n("p",null,[t("grpc在netcore官网文档："),n("a",q,[t("https://docs.microsoft.com/zh-cn/aspnet/core/grpc/?view=aspnetcore-5.0"),s(e)])]),n("p",null,[t("官方教程："),n("a",P,[t("https://www.grpc.io/docs/quickstart/csharp/"),s(e)])]),n("p",null,[t("知乎文章："),n("a",x,[t("https://zhuanlan.zhihu.com/p/148139089"),s(e)])]),n("p",null,[t("晓晨系列教程："),n("a",C,[t("https://www.cnblogs.com/stulzq/p/11897704.html"),s(e)])]),n("p",null,[t("NET Core3高性能RPC框架："),n("a",T,[t("https://www.cnblogs.com/Leo_wl/p/11593681.html"),s(e)])]),n("p",null,[t("如何使gRPC 获得最佳性能："),n("a",R,[t("https://mp.weixin.qq.com/s/3--85-0CMMi81xyJC-8xjA"),s(e)])]),n("p",null,[t("code综艺圈："),n("a",N,[t("https://mp.weixin.qq.com/s/4DGZQTCm0DOxRrM8Nna_1w"),s(e)])])])}const A=o(l,[["render",S],["__file","introduce.html.vue"]]);export{A as default};
